// Code generated by protoc-gen-go-json. DO NOT EDIT.
// protoc-gen-go-json version: (devel)
// source: module.proto

package pb

import (
	bytes "bytes"
	base64 "encoding/base64"
	strconv "strconv"
)

// pb.Number
func (x *Number) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name U32 : kind uint32
	// number 1
	if x.U32 != 0 {
		buf.WriteString(`"u32":`)
		buf.WriteString(strconv.FormatUint(uint64(x.U32), 10))
		writeComma = true
	}
	// go name U64 : kind uint64
	// number 2
	if x.U64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"u64":`)
		buf.WriteString(strconv.FormatUint(uint64(x.U64), 10))
	}
	// go name S32 : kind sint32
	// number 3
	if x.S32 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"s32":`)
		buf.WriteString(strconv.FormatUint(uint64(x.S32), 10))
	}
	// go name S64 : kind sint64
	// number 4
	if x.S64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"s64":`)
		buf.WriteString(strconv.FormatUint(uint64(x.S64), 10))
	}
	// go name Uf32 : kind fixed32
	// number 5
	if x.Uf32 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"uf32":`)
		buf.WriteString(strconv.FormatUint(uint64(x.Uf32), 10))
	}
	// go name Uf64 : kind fixed64
	// number 6
	if x.Uf64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"uf64":`)
		buf.WriteString(strconv.FormatUint(uint64(x.Uf64), 10))
	}
	// go name Sf32 : kind sfixed32
	// number 7
	if x.Sf32 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"sf32":`)
		buf.WriteString(strconv.FormatUint(uint64(x.Sf32), 10))
	}
	// go name Sf64 : kind sfixed64
	// number 8
	if x.Sf64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"sf64":`)
		buf.WriteString(strconv.FormatUint(uint64(x.Sf64), 10))
	}
	// go name I32 : kind int32
	// number 9
	if x.I32 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"i32":`)
		buf.WriteString(strconv.FormatUint(uint64(x.I32), 10))
	}
	// go name I64 : kind int64
	// number 10
	if x.I64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"i64":`)
		buf.WriteString(strconv.FormatUint(uint64(x.I64), 10))
	}
	// go name F64 : kind double
	// number 11
	if x.F64 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"f64":`)
		buf.WriteString(strconv.FormatFloat(float64(x.F64), 'f', -1, 64))
	}
	// go name F32 : kind float
	// number 12
	if x.F32 != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"f32":`)
		buf.WriteString(strconv.FormatFloat(float64(x.F32), 'f', -1, 32))
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.String
func (x *String) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Str : kind string
	// number 1
	if len(x.Str) != 0 {
		buf.WriteString(`"str":`)
		buf.WriteByte('"')
		buf.WriteString(x.Str)
		buf.WriteByte('"')
		writeComma = true
	}
	// go name Bytes : kind bytes
	// number 2
	if len(x.Bytes) != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"bytes":`)
		buf.WriteByte('"')
		buf.WriteString(base64.StdEncoding.EncodeToString(x.Bytes))
		buf.WriteByte('"')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Bool
func (x *Bool) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	// go name B : kind bool
	// number 1
	buf.WriteString(`"b":`)
	if x.B {
		buf.WriteString("true")
	} else {
		buf.WriteString("false")
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Message
func (x *Message) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Type : kind enum
	// number 1
	buf.WriteString(`"type":`)
	buf.WriteByte('"')
	buf.WriteString(x.Type.String())
	buf.WriteByte('"')
	writeComma = true
	// go name Number : kind message
	// number 2
	if x.Number != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"number":`)
		if data, err := x.Number.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name String_ : kind message
	// number 3
	if x.String_ != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"string":`)
		if data, err := x.String_.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name Bool : kind message
	// number 4
	if x.Bool != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"bool":`)
		if data, err := x.Bool.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Array
func (x *Array) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Numbers : kind message
	// number 1
	if len(x.Numbers) > 0 {
		buf.WriteString(`"numbers":[`)
		for i, val := range x.Numbers {
			// message
			if i > 0 {
				buf.WriteByte(',')
			}
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte(']')
		writeComma = true
	}
	// go name Strings : kind message
	// number 2
	if len(x.Strings) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"strings":[`)
		for i, val := range x.Strings {
			// message
			if i > 0 {
				buf.WriteByte(',')
			}
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte(']')
	}
	// go name Bools : kind message
	// number 3
	if len(x.Bools) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"bools":[`)
		for i, val := range x.Bools {
			// message
			if i > 0 {
				buf.WriteByte(',')
			}
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte(']')
	}
	// go name Messages : kind message
	// number 4
	if len(x.Messages) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"messages":[`)
		for i, val := range x.Messages {
			// message
			if i > 0 {
				buf.WriteByte(',')
			}
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte(']')
	}
	// go name Arrays : kind message
	// number 5
	if len(x.Arrays) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"arrays":[`)
		for i, val := range x.Arrays {
			// message
			if i > 0 {
				buf.WriteByte(',')
			}
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte(']')
	}
	// go name Types : kind enum
	// number 6
	if len(x.Types) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"types":[`)
		for i, val := range x.Types {
			// enum
			if i > 0 {
				buf.WriteByte(',')
			}
			buf.WriteByte('"')
			buf.WriteString(val.String())
			buf.WriteByte('"')
		}
		buf.WriteByte(']')
	}
	// go name U32S : kind uint32
	// number 7
	if len(x.U32S) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"u32s":[`)
		for i, val := range x.U32S {
			// uint32
			if i > 0 {
				buf.WriteByte(',')
			}
			buf.WriteString(strconv.FormatUint(uint64(val), 10))
		}
		buf.WriteByte(']')
	}
	// go name Strs : kind string
	// number 8
	if len(x.Strs) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"strs":[`)
		for i, val := range x.Strs {
			// string
			if i > 0 {
				buf.WriteByte(',')
			}
			buf.WriteByte('"')
			buf.WriteString(val)
			buf.WriteByte('"')
		}
		buf.WriteByte(']')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Map
func (x *Map) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Numbers : kind message
	// number 1
	if len(x.Numbers) > 0 {
		buf.WriteString(`"numbers":{`)
		var many bool
		for key, val := range x.Numbers {
			// message, key uint32, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(strconv.FormatUint(uint64(key), 10))
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
		writeComma = true
	}
	// go name Strings : kind message
	// number 2
	if len(x.Strings) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"strings":{`)
		var many bool
		for key, val := range x.Strings {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Bools : kind message
	// number 3
	if len(x.Bools) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"bools":{`)
		var many bool
		for key, val := range x.Bools {
			// message, key bool, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			if key {
				buf.WriteString("\"true\"")
			} else {
				buf.WriteString("\"false\"")
			}
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Messages : kind message
	// number 4
	if len(x.Messages) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"messages":{`)
		var many bool
		for key, val := range x.Messages {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Arrays : kind message
	// number 5
	if len(x.Arrays) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"arrays":{`)
		var many bool
		for key, val := range x.Arrays {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Types : kind message
	// number 6
	if len(x.Types) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"types":{`)
		var many bool
		for key, val := range x.Types {
			// message, key int32, value enum
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(strconv.FormatUint(uint64(key), 10))
			buf.WriteByte('"')
			buf.WriteByte(':')
			buf.WriteByte('"')
			buf.WriteString(val.String())
			buf.WriteByte('"')
		}
		buf.WriteByte('}')
	}
	// go name U32S : kind message
	// number 7
	if len(x.U32S) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"u32s":{`)
		var many bool
		for key, val := range x.U32S {
			// message, key string, value uint32
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			buf.WriteString(strconv.FormatUint(uint64(val), 10))
		}
		buf.WriteByte('}')
	}
	// go name Strs : kind message
	// number 8
	if len(x.Strs) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"strs":{`)
		var many bool
		for key, val := range x.Strs {
			// message, key string, value string
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			buf.WriteByte('"')
			buf.WriteString(val)
			buf.WriteByte('"')
		}
		buf.WriteByte('}')
	}
	// go name Empties : kind message
	// number 9
	if len(x.Empties) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"empties":{`)
		var many bool
		for key, val := range x.Empties {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Optionals : kind message
	// number 10
	if len(x.Optionals) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"optionals":{`)
		var many bool
		for key, val := range x.Optionals {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	// go name Oneofs : kind message
	// number 11
	if len(x.Oneofs) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"oneofs":{`)
		var many bool
		for key, val := range x.Oneofs {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Empty
func (x *Empty) MarshalJSON() ([]byte, error) {
	return []byte("{}"), nil
}

// pb.Optional
func (x *Optional) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Number : kind message
	// number 1
	if x.Number != nil {
		buf.WriteString(`"number":`)
		if data, err := x.Number.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
		writeComma = true
	}
	// go name String_ : kind message
	// number 2
	if x.String_ != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"string":`)
		if data, err := x.String_.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name Bool : kind message
	// number 3
	if x.Bool != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"bool":`)
		if data, err := x.Bool.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name Message : kind message
	// number 4
	if x.Message != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"message":`)
		if data, err := x.Message.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name Array : kind message
	// number 5
	if x.Array != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"array":`)
		if data, err := x.Array.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name Type : kind enum
	// number 6
	if x.Type != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"type":`)
		buf.WriteByte('"')
		buf.WriteString(x.Type.String())
		buf.WriteByte('"')
	}
	// go name U32 : kind uint32
	// number 7
	if x.U32 != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"u32":`)
		buf.WriteString(strconv.FormatUint(uint64(*x.U32), 10))
	}
	// go name Str : kind string
	// number 8
	if x.Str != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"str":`)
		buf.WriteByte('"')
		buf.WriteString(*x.Str)
		buf.WriteByte('"')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.Oneof
func (x *Oneof) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Number : kind message
	// number 1
	if x.Number != nil {
		buf.WriteString(`"number":`)
		if data, err := x.Number.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
		writeComma = true
	}
	// go name String_ : kind message
	// Oneof String_
	if x.Oneof != nil {
		switch x := x.Oneof.(type) {
		// String_ Oneof_String_ 2
		case *Oneof_String_:
			if x.String_ != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"string":`)
				if data, err := x.String_.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Bool Oneof_Bool 3
		case *Oneof_Bool:
			if x.Bool != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"bool":`)
				if data, err := x.Bool.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Message Oneof_Message 4
		case *Oneof_Message:
			if x.Message != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"message":`)
				if data, err := x.Message.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Array Oneof_Array 5
		case *Oneof_Array:
			if x.Array != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"array":`)
				if data, err := x.Array.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Type Oneof_Type 6
		case *Oneof_Type:
			if writeComma {
				buf.WriteByte(',')
			} else {
				writeComma = true
			}
			buf.WriteString(`"type":`)
			buf.WriteByte('"')
			buf.WriteString(x.Type.String())
			buf.WriteByte('"')
		// U32 Oneof_U32 7
		case *Oneof_U32:
			if x.U32 != 0 {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"u32":`)
				buf.WriteString(strconv.FormatUint(uint64(x.U32), 10))
			}
		// Str Oneof_Str 8
		case *Oneof_Str:
			if len(x.Str) != 0 {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"str":`)
				buf.WriteByte('"')
				buf.WriteString(x.Str)
				buf.WriteByte('"')
			}
		}
	}
	// go name NumberX : kind message
	// number 9
	if x.NumberX != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"numberX":`)
		if data, err := x.NumberX.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	// go name StringX : kind message
	// number 10
	if x.StringX != nil {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"stringX":`)
		if data, err := x.StringX.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buf.Write(data)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.UnsafeTest.Sub1
func (x *UnsafeTest_Sub1) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name S : kind string
	// number 1
	if len(x.S) != 0 {
		buf.WriteString(`"s":`)
		buf.WriteByte('"')
		buf.WriteString(x.S)
		buf.WriteByte('"')
		writeComma = true
	}
	// go name B : kind bytes
	// number 2
	if len(x.B) != 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"b":`)
		buf.WriteByte('"')
		buf.WriteString(base64.StdEncoding.EncodeToString(x.B))
		buf.WriteByte('"')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.UnsafeTest.Sub2
func (x *UnsafeTest_Sub2) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name S : kind string
	// number 1
	if len(x.S) > 0 {
		buf.WriteString(`"s":[`)
		for i, val := range x.S {
			// string
			if i > 0 {
				buf.WriteByte(',')
			}
			buf.WriteByte('"')
			buf.WriteString(val)
			buf.WriteByte('"')
		}
		buf.WriteByte(']')
		writeComma = true
	}
	// go name B : kind bytes
	// number 2
	if len(x.B) > 0 {
		if writeComma {
			buf.WriteByte(',')
		} else {
			writeComma = true
		}
		buf.WriteString(`"b":[`)
		for i, val := range x.B {
			// bytes
			if i > 0 {
				buf.WriteByte(',')
			}
			buf.WriteByte('"')
			buf.WriteString(base64.StdEncoding.EncodeToString(val))
			buf.WriteByte('"')
		}
		buf.WriteByte(']')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.UnsafeTest.Sub3
func (x *UnsafeTest_Sub3) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	// go name Foo : kind message
	// number 1
	if len(x.Foo) > 0 {
		buf.WriteString(`"foo":{`)
		var many bool
		for key, val := range x.Foo {
			// message, key string, value message
			if many {
				buf.WriteByte(',')
			} else {
				many = true
			}
			buf.WriteByte('"')
			buf.WriteString(key)
			buf.WriteByte('"')
			buf.WriteByte(':')
			if data, err := val.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buf.Write(data)
			}
		}
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.UnsafeTest.Sub4
func (x *UnsafeTest_Sub4) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name S : kind string
	// Foo S
	if x.Foo != nil {
		switch x := x.Foo.(type) {
		// S UnsafeTest_Sub4_S 1
		case *UnsafeTest_Sub4_S:
			if len(x.S) != 0 {
				buf.WriteString(`"s":`)
				buf.WriteByte('"')
				buf.WriteString(x.S)
				buf.WriteByte('"')
				writeComma = true
			}
		// B UnsafeTest_Sub4_B 2
		case *UnsafeTest_Sub4_B:
			if len(x.B) != 0 {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"b":`)
				buf.WriteByte('"')
				buf.WriteString(base64.StdEncoding.EncodeToString(x.B))
				buf.WriteByte('"')
			}
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// pb.UnsafeTest
func (x *UnsafeTest) MarshalJSON() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	var buf bytes.Buffer
	buf.WriteByte('{')
	var writeComma bool
	// go name Sub1 : kind message
	// Sub Sub1
	if x.Sub != nil {
		switch x := x.Sub.(type) {
		// Sub1 UnsafeTest_Sub1_ 1
		case *UnsafeTest_Sub1_:
			if x.Sub1 != nil {
				buf.WriteString(`"sub1":`)
				if data, err := x.Sub1.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
				writeComma = true
			}
		// Sub2 UnsafeTest_Sub2_ 2
		case *UnsafeTest_Sub2_:
			if x.Sub2 != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"sub2":`)
				if data, err := x.Sub2.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Sub3 UnsafeTest_Sub3_ 3
		case *UnsafeTest_Sub3_:
			if x.Sub3 != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"sub3":`)
				if data, err := x.Sub3.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		// Sub4 UnsafeTest_Sub4_ 4
		case *UnsafeTest_Sub4_:
			if x.Sub4 != nil {
				if writeComma {
					buf.WriteByte(',')
				} else {
					writeComma = true
				}
				buf.WriteString(`"sub4":`)
				if data, err := x.Sub4.MarshalJSON(); err != nil {
					return nil, err
				} else {
					buf.Write(data)
				}
			}
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}
